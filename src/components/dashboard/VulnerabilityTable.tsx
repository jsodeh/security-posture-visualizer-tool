import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Search, Filter, AlertTriangle, Loader2, CheckCircle } from 'lucide-react';
import { useSecurityData } from '@/hooks/useSecurityData';
import { toast } from 'sonner';

const VulnerabilityTable = () => {
  const [searchTerm, setSearchTerm] = useState('');
  const [severityFilter, setSeverityFilter] = useState('all');
  const [resolvingVulns, setResolvingVulns] = useState<Set<string>>(new Set());
  const { useVulnerabilities, useUpdateVulnerability } = useSecurityData();
  const { data: vulnerabilities = [], isLoading, error } = useVulnerabilities();
  const updateVulnerability = useUpdateVulnerability();

  // Fallback data if no real data is available
  const fallbackVulnerabilities = [
    {
      id: 'demo-1',
      cve_id: 'CVE-2024-1234',
      title: 'SQL Injection in User Authentication',
      severity: 'Critical',
      cvss_score: 9.8,
      status: 'Open',
      assignee: 'John Doe',
      discovered_date: '2024-05-15',
      source: 'Pentest',
      component: 'Web Application'
    },
    {
      id: 'demo-2',
      cve_id: 'CVE-2024-5678',
      title: 'Cross-Site Scripting (XSS) in Comments',
      severity: 'High',
      cvss_score: 7.4,
      status: 'In Progress',
      assignee: 'Jane Smith',
      discovered_date: '2024-05-10',
      source: 'Scanner',
      component: 'Web Application'
    },
    {
      id: 'demo-3',
      cve_id: 'CVE-2024-9012',
      title: 'Unencrypted Data Transmission',
      severity: 'High',
      cvss_score: 7.2,
      status: 'Resolved',
      assignee: 'Mike Johnson',
      discovered_date: '2024-05-08',
      source: 'Pentest',
      component: 'API Gateway'
    }
  ];

  const displayVulnerabilities = vulnerabilities.length > 0 ? vulnerabilities : fallbackVulnerabilities;

  const getSeverityBadge = (severity: string) => {
    const styles = {
      Critical: 'bg-red-500 text-white',
      High: 'bg-orange-500 text-white',
      Medium: 'bg-yellow-500 text-white',
      Low: 'bg-green-500 text-white'
    };
    return styles[severity as keyof typeof styles] || styles.Medium;
  };

  const getStatusBadge = (status: string) => {
    const styles = {
      Open: 'bg-red-500/20 text-red-400 border-red-400',
      'In Progress': 'bg-yellow-500/20 text-yellow-400 border-yellow-400',
      Resolved: 'bg-green-500/20 text-green-400 border-green-400'
    };
    return styles[status as keyof typeof styles] || styles.Open;
  };

  const filteredVulnerabilities = displayVulnerabilities.filter(vuln => {
    const matchesSearch = vuln.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         vuln.cve_id.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesSeverity = severityFilter === 'all' || vuln.severity.toLowerCase() === severityFilter;
    return matchesSearch && matchesSeverity;
  });

  const handleStatusUpdate = async (vulnId: string, newStatus: string) => {
    setResolvingVulns(prev => new Set(prev).add(vulnId));
    
    try {
      await updateVulnerability.mutateAsync({ vulnId, status: newStatus });
      toast.success(`Vulnerability marked as ${newStatus.toLowerCase()}`);
    } catch (error) {
      toast.error('Failed to update vulnerability status');
      console.error('Update error:', error);
    } finally {
      setResolvingVulns(prev => {
        const newSet = new Set(prev);
        newSet.delete(vulnId);
        return newSet;
      });
    }
  };

  // Calculate summary counts
  const criticalCount = displayVulnerabilities.filter(v => v.severity === 'Critical').length;
  const highCount = displayVulnerabilities.filter(v => v.severity === 'High').length;
  const mediumCount = displayVulnerabilities.filter(v => v.severity === 'Medium').length;
  const lowCount = displayVulnerabilities.filter(v => v.severity === 'Low').length;

  if (error) {
    console.error('Error loading vulnerabilities:', error);
  }

  return (
    <div className="space-y-6">
      {/* Summary Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card className="bg-red-500/10 border-red-500/30 backdrop-blur-lg">
          <CardContent className="p-4">
            <div className="flex items-center space-x-2">
              <AlertTriangle className="h-5 w-5 text-red-400" />
              <div>
                <div className="text-2xl font-bold text-red-400">{criticalCount}</div>
                <div className="text-sm text-red-400">Critical</div>
              </div>
            </div>
          </CardContent>
        </Card>
        <Card className="bg-orange-500/10 border-orange-500/30 backdrop-blur-lg">
          <CardContent className="p-4">
            <div className="flex items-center space-x-2">
              <AlertTriangle className="h-5 w-5 text-orange-400" />
              <div>
                <div className="text-2xl font-bold text-orange-400">{highCount}</div>
                <div className="text-sm text-orange-400">High</div>
              </div>
            </div>
          </CardContent>
        </Card>
        <Card className="bg-yellow-500/10 border-yellow-500/30 backdrop-blur-lg">
          <CardContent className="p-4">
            <div className="flex items-center space-x-2">
              <AlertTriangle className="h-5 w-5 text-yellow-400" />
              <div>
                <div className="text-2xl font-bold text-yellow-400">{mediumCount}</div>
                <div className="text-sm text-yellow-400">Medium</div>
              </div>
            </div>
          </CardContent>
        </Card>
        <Card className="bg-green-500/10 border-green-500/30 backdrop-blur-lg">
          <CardContent className="p-4">
            <div className="flex items-center space-x-2">
              <AlertTriangle className="h-5 w-5 text-green-400" />
              <div>
                <div className="text-2xl font-bold text-green-400">{lowCount}</div>
                <div className="text-sm text-green-400">Low</div>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Vulnerability Table */}
      <Card className="bg-slate-800/50 border-slate-700 backdrop-blur-lg">
        <CardHeader>
          <div className="flex justify-between items-center">
            <div>
              <CardTitle className="text-white">Vulnerability Management</CardTitle>
              <CardDescription className="text-slate-400">
                Track and manage identified security vulnerabilities
                {isLoading && ' (Loading...)'}
                {error && ' (Using demo data)'}
              </CardDescription>
            </div>
            <div className="flex space-x-2">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-slate-400" />
                <Input
                  placeholder="Search vulnerabilities..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-10 bg-slate-700 border-slate-600 text-white"
                />
              </div>
              <Select value={severityFilter} onValueChange={setSeverityFilter}>
                <SelectTrigger className="w-[140px] bg-slate-700 border-slate-600 text-white">
                  <Filter className="h-4 w-4 mr-2" />
                  <SelectValue placeholder="Severity" />
                </SelectTrigger>
                <SelectContent className="bg-slate-700 border-slate-600">
                  <SelectItem value="all">All Severities</SelectItem>
                  <SelectItem value="critical">Critical</SelectItem>
                  <SelectItem value="high">High</SelectItem>
                  <SelectItem value="medium">Medium</SelectItem>
                  <SelectItem value="low">Low</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        </CardHeader>
        <CardContent>
          {isLoading ? (
            <div className="flex items-center justify-center py-8">
              <Loader2 className="h-8 w-8 animate-spin text-blue-400" />
              <span className="ml-2 text-slate-400">Loading vulnerabilities...</span>
            </div>
          ) : (
            <Table>
              <TableHeader>
                <TableRow className="border-slate-700">
                  <TableHead className="text-slate-300">CVE ID</TableHead>
                  <TableHead className="text-slate-300">Title</TableHead>
                  <TableHead className="text-slate-300">Severity</TableHead>
                  <TableHead className="text-slate-300">CVSS</TableHead>
                  <TableHead className="text-slate-300">Status</TableHead>
                  <TableHead className="text-slate-300">Assignee</TableHead>
                  <TableHead className="text-slate-300">Component</TableHead>
                  <TableHead className="text-slate-300">Discovered</TableHead>
                  <TableHead className="text-slate-300">Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {filteredVulnerabilities.map((vuln) => (
                  <TableRow key={vuln.id} className="border-slate-700 hover:bg-slate-700/30">
                    <TableCell className="text-blue-400 font-mono text-sm">{vuln.cve_id}</TableCell>
                    <TableCell className="text-white font-medium max-w-xs truncate">
                      {vuln.title}
                    </TableCell>
                    <TableCell>
                      <Badge className={getSeverityBadge(vuln.severity)}>
                        {vuln.severity}
                      </Badge>
                    </TableCell>
                    <TableCell className="text-white font-bold">{vuln.cvss_score}</TableCell>
                    <TableCell>
                      <Badge variant="outline" className={getStatusBadge(vuln.status)}>
                        {vuln.status}
                      </Badge>
                    </TableCell>
                    <TableCell className="text-slate-300">{vuln.assignee}</TableCell>
                    <TableCell className="text-slate-300">{vuln.component}</TableCell>
                    <TableCell className="text-slate-400 text-sm">
                      {new Date(vuln.discovered_date).toLocaleDateString()}
                    </TableCell>
                    <TableCell>
                      {vuln.status !== 'Resolved' && (
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => handleStatusUpdate(vuln.id, 'Resolved')}
                          disabled={resolvingVulns.has(vuln.id)}
                          className="text-green-400 border-green-400 hover:bg-green-400 hover:text-white"
                        >
                          {resolvingVulns.has(vuln.id) ? (
                            <>
                              <Loader2 className="h-3 w-3 mr-1 animate-spin" />
                              Resolving...
                            </>
                          ) : (
                            <>
                              <CheckCircle className="h-3 w-3 mr-1" />
                              Resolve
                            </>
                          )}
                        </Button>
                      )}
                      {vuln.status === 'Resolved' && (
                        <Badge className="bg-green-500/20 text-green-400 border-green-400">
                          <CheckCircle className="h-3 w-3 mr-1" />
                          Resolved
                        </Badge>
                      )}
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          )}
        </CardContent>
      </Card>
    </div>
  );
};

export default VulnerabilityTable;
