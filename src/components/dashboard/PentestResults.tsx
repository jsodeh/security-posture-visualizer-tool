import React from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Button } from "@/components/ui/button";
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';
import { FileText, Calendar, User, Download, AlertTriangle, CheckCircle, Loader2, ExternalLink } from 'lucide-react';
import { useSecurityData } from '@/hooks/useSecurityData';
import { toast } from 'sonner';

const PentestResults = () => {
  const { usePentestFindings } = useSecurityData();
  const { data: pentestFindings = [], isLoading, error } = usePentestFindings();

  // Handle download report
  const handleDownloadReport = (testName: string) => {
    toast.info(`Generating ${testName} report...`);
    // Simulate report generation
    setTimeout(() => {
      toast.success(`${testName} report downloaded successfully!`);
    }, 2000);
  };

  // Handle view report
  const handleViewReport = (testName: string) => {
    toast.info(`Opening ${testName} detailed report...`);
    // In a real app, this would open a detailed report view
  };

  // Transform pentest findings into historical data
  const pentestHistory = React.useMemo(() => {
    if (!pentestFindings.length) {
      // Fallback data when no real data is available
      return [
        {
          date: '2024-05-15',
          tester: 'CyberSec Pro',
          scope: 'Web Application',
          grade: 'B+',
          critical: 2,
          high: 5,
          medium: 12,
          low: 8,
          status: 'completed'
        },
        {
          date: '2024-03-20',
          tester: 'SecureAudit Inc',
          scope: 'Network Infrastructure',
          grade: 'B',
          critical: 3,
          high: 8,
          medium: 15,
          low: 10,
          status: 'completed'
        },
        {
          date: '2024-01-10',
          tester: 'PenTest Labs',
          scope: 'Full Scope',
          grade: 'C+',
          critical: 5,
          high: 12,
          medium: 20,
          low: 15,
          status: 'completed'
        }
      ];
    }

    // Group findings by test date and tester
    const groupedFindings = pentestFindings.reduce((groups: any, finding) => {
      const testDate = new Date(finding.test_date).toISOString().split('T')[0];
      const key = `${testDate}-${finding.tester}`;
      
      if (!groups[key]) {
        groups[key] = {
          date: testDate,
          tester: finding.tester,
          scope: 'Security Assessment',
          findings: [],
          critical: 0,
          high: 0,
          medium: 0,
          low: 0,
          status: 'completed'
        };
      }
      
      groups[key].findings.push(finding);
      
      // Count by severity
      switch (finding.severity.toLowerCase()) {
        case 'critical':
          groups[key].critical++;
          break;
        case 'high':
          groups[key].high++;
          break;
        case 'medium':
          groups[key].medium++;
          break;
        case 'low':
          groups[key].low++;
          break;
      }
      
      return groups;
    }, {});

    return Object.values(groupedFindings).map((group: any) => ({
      ...group,
      grade: calculatePentestGrade(group.critical, group.high, group.medium, group.low)
    })).sort((a: any, b: any) => new Date(b.date).getTime() - new Date(a.date).getTime());
  }, [pentestFindings]);

  const currentPentest = pentestHistory[0];
  
  const findingsTrend = pentestHistory.slice(0, 6).reverse().map(test => ({
    month: new Date(test.date).toLocaleDateString('en-US', { month: 'short' }),
    critical: test.critical,
    high: test.high,
    medium: test.medium,
    low: test.low,
  }));

  // Calculate remediation status from real findings
  const remediationStatus = React.useMemo(() => {
    if (!pentestFindings.length) {
      // Fallback data
      return [
        { category: 'Authentication', total: 8, fixed: 6, inProgress: 1, pending: 1 },
        { category: 'Authorization', total: 5, fixed: 4, inProgress: 1, pending: 0 },
        { category: 'Input Validation', total: 12, fixed: 9, inProgress: 2, pending: 1 },
        { category: 'Cryptography', total: 3, fixed: 2, inProgress: 1, pending: 0 },
        { category: 'Session Management', total: 4, fixed: 3, inProgress: 0, pending: 1 },
      ];
    }

    // Group findings by category (derived from title/description)
    const categories = pentestFindings.reduce((cats: any, finding) => {
      const category = categorizeFindings(finding.title, finding.description);
      if (!cats[category]) {
        cats[category] = { total: 0, fixed: 0, inProgress: 0, pending: 0 };
      }
      
      cats[category].total++;
      
      switch (finding.status?.toLowerCase()) {
        case 'resolved':
        case 'fixed':
          cats[category].fixed++;
          break;
        case 'in progress':
        case 'in-progress':
          cats[category].inProgress++;
          break;
        default:
          cats[category].pending++;
      }
      
      return cats;
    }, {});

    return Object.entries(categories).map(([category, stats]) => ({
      category,
      ...stats
    }));
  }, [pentestFindings]);

  const getGradeColor = (grade: string) => {
    const gradeMap: { [key: string]: string } = {
      'A+': 'text-green-400 bg-green-500/20',
      'A': 'text-green-400 bg-green-500/20',
      'A-': 'text-green-400 bg-green-500/20',
      'B+': 'text-blue-400 bg-blue-500/20',
      'B': 'text-blue-400 bg-blue-500/20',
      'B-': 'text-blue-400 bg-blue-500/20',
      'C+': 'text-yellow-400 bg-yellow-500/20',
      'C': 'text-yellow-400 bg-yellow-500/20',
      'C-': 'text-yellow-400 bg-yellow-500/20',
      'D+': 'text-orange-400 bg-orange-500/20',
      'D': 'text-orange-400 bg-orange-500/20',
      'D-': 'text-orange-400 bg-orange-500/20',
      'F': 'text-red-400 bg-red-500/20'
    };
    return gradeMap[grade] || 'text-gray-400 bg-gray-500/20';
  };

  if (error) {
    console.error('Error loading pentest findings:', error);
  }

  return (
    <div className="space-y-6">
      {/* Current Pentest Overview */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <Card className="lg:col-span-2 bg-slate-800/50 border-slate-700 backdrop-blur-lg">
          <CardHeader>
            <CardTitle className="text-white">Latest Penetration Test Results</CardTitle>
            <CardDescription className="text-slate-400">
              {currentPentest?.scope} assessment by {currentPentest?.tester}
              {isLoading && ' (Loading...)'}
              {error && ' (Using demo data)'}
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            {isLoading ? (
              <div className="flex items-center justify-center py-8">
                <Loader2 className="h-8 w-8 animate-spin text-blue-400" />
                <span className="ml-2 text-slate-400">Loading pentest results...</span>
              </div>
            ) : currentPentest ? (
              <>
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-4">
                    <div className={`text-4xl font-bold px-6 py-3 rounded-lg ${getGradeColor(currentPentest.grade)}`}>
                      {currentPentest.grade}
                    </div>
                    <div>
                      <div className="text-white font-semibold text-lg">Overall Security Grade</div>
                      <div className="text-slate-400 text-sm">Based on {currentPentest.critical + currentPentest.high + currentPentest.medium + currentPentest.low} findings</div>
                    </div>
                  </div>
                  <Button 
                    variant="outline" 
                    size="sm" 
                    className="text-blue-400 border-blue-400 hover:bg-blue-400 hover:text-white"
                    onClick={() => handleDownloadReport('Latest Penetration Test')}
                  >
                    <Download className="h-4 w-4 mr-2" />
                    Download Report
                  </Button>
                </div>

                <div className="grid grid-cols-4 gap-4">
                  <div className="bg-red-500/10 border border-red-500/30 rounded-lg p-4 text-center">
                    <div className="text-2xl font-bold text-red-400">{currentPentest.critical}</div>
                    <div className="text-sm text-red-400">Critical</div>
                  </div>
                  <div className="bg-orange-500/10 border border-orange-500/30 rounded-lg p-4 text-center">
                    <div className="text-2xl font-bold text-orange-400">{currentPentest.high}</div>
                    <div className="text-sm text-orange-400">High</div>
                  </div>
                  <div className="bg-yellow-500/10 border border-yellow-500/30 rounded-lg p-4 text-center">
                    <div className="text-2xl font-bold text-yellow-400">{currentPentest.medium}</div>
                    <div className="text-sm text-yellow-400">Medium</div>
                  </div>
                  <div className="bg-green-500/10 border border-green-500/30 rounded-lg p-4 text-center">
                    <div className="text-2xl font-bold text-green-400">{currentPentest.low}</div>
                    <div className="text-sm text-green-400">Low</div>
                  </div>
                </div>
              </>
            ) : (
              <div className="text-center py-8 text-slate-400">
                No penetration test results available
              </div>
            )}
          </CardContent>
        </Card>

        <Card className="bg-slate-800/50 border-slate-700 backdrop-blur-lg">
          <CardHeader>
            <CardTitle className="text-white">Test Details</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            {currentPentest ? (
              <>
                <div className="flex items-center space-x-3">
                  <Calendar className="h-5 w-5 text-blue-400" />
                  <div>
                    <div className="text-white font-medium">Test Date</div>
                    <div className="text-slate-400 text-sm">{currentPentest.date}</div>
                  </div>
                </div>
                <div className="flex items-center space-x-3">
                  <User className="h-5 w-5 text-blue-400" />
                  <div>
                    <div className="text-white font-medium">Testing Company</div>
                    <div className="text-slate-400 text-sm">{currentPentest.tester}</div>
                  </div>
                </div>
                <div className="flex items-center space-x-3">
                  <FileText className="h-5 w-5 text-blue-400" />
                  <div>
                    <div className="text-white font-medium">Scope</div>
                    <div className="text-slate-400 text-sm">{currentPentest.scope}</div>
                  </div>
                </div>
                <div className="flex items-center space-x-3">
                  <CheckCircle className="h-5 w-5 text-green-400" />
                  <div>
                    <div className="text-white font-medium">Status</div>
                    <Badge className="bg-green-500 text-white">Completed</Badge>
                  </div>
                </div>
              </>
            ) : (
              <div className="text-slate-400 text-sm">No test details available</div>
            )}
          </CardContent>
        </Card>
      </div>

      {/* Findings Trend */}
      <Card className="bg-slate-800/50 border-slate-700 backdrop-blur-lg">
        <CardHeader>
          <CardTitle className="text-white">Penetration Test Findings Trend</CardTitle>
          <CardDescription className="text-slate-400">
            Vulnerability discoveries across recent penetration tests
          </CardDescription>
        </CardHeader>
        <CardContent>
          <ResponsiveContainer width="100%" height={300}>
            <BarChart data={findingsTrend}>
              <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
              <XAxis dataKey="month" stroke="#9CA3AF" fontSize={12} />
              <YAxis stroke="#9CA3AF" fontSize={12} />
              <Tooltip 
                contentStyle={{ 
                  backgroundColor: '#1F2937', 
                  border: '1px solid #374151',
                  borderRadius: '8px',
                  color: '#fff'
                }} 
              />
              <Bar dataKey="critical" stackId="a" fill="#ef4444" />
              <Bar dataKey="high" stackId="a" fill="#f97316" />
              <Bar dataKey="medium" stackId="a" fill="#eab308" />
              <Bar dataKey="low" stackId="a" fill="#22c55e" />
            </BarChart>
          </ResponsiveContainer>
        </CardContent>
      </Card>

      {/* Remediation Status */}
      <Card className="bg-slate-800/50 border-slate-700 backdrop-blur-lg">
        <CardHeader>
          <CardTitle className="text-white">Remediation Progress</CardTitle>
          <CardDescription className="text-slate-400">
            Current status of vulnerability remediation efforts
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {remediationStatus.map((item, index) => (
              <div key={index} className="space-y-2">
                <div className="flex justify-between items-center">
                  <span className="text-white font-medium">{item.category}</span>
                  <span className="text-slate-400 text-sm">
                    {item.fixed}/{item.total} resolved
                  </span>
                </div>
                <div className="flex space-x-1">
                  <div 
                    className="bg-green-500 h-2 rounded-l"
                    style={{ width: `${(item.fixed / item.total) * 100}%` }}
                  />
                  <div 
                    className="bg-yellow-500 h-2"
                    style={{ width: `${(item.inProgress / item.total) * 100}%` }}
                  />
                  <div 
                    className="bg-red-500 h-2 rounded-r"
                    style={{ width: `${(item.pending / item.total) * 100}%` }}
                  />
                </div>
                <div className="flex justify-between text-xs text-slate-400">
                  <span>✓ {item.fixed} Fixed</span>
                  <span>⚠ {item.inProgress} In Progress</span>
                  <span>⏳ {item.pending} Pending</span>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Pentest History */}
      <Card className="bg-slate-800/50 border-slate-700 backdrop-blur-lg">
        <CardHeader>
          <CardTitle className="text-white">Penetration Test History</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {pentestHistory.map((test, index) => (
              <div key={index} className="flex items-center justify-between p-4 bg-slate-700/30 rounded-lg">
                <div className="flex items-center space-x-4">
                  <div className={`px-4 py-2 rounded font-bold text-lg ${getGradeColor(test.grade)}`}>
                    {test.grade}
                  </div>
                  <div>
                    <div className="text-white font-medium">{test.scope}</div>
                    <div className="text-slate-400 text-sm">{test.tester} • {test.date}</div>
                  </div>
                </div>
                <div className="flex items-center space-x-4">
                  <div className="text-right text-sm">
                    <div className="text-slate-400">Findings</div>
                    <div className="text-white">
                      <span className="text-red-400">{test.critical}</span> / 
                      <span className="text-orange-400">{test.high}</span> / 
                      <span className="text-yellow-400">{test.medium}</span> / 
                      <span className="text-green-400">{test.low}</span>
                    </div>
                  </div>
                  <Button 
                    variant="outline" 
                    size="sm" 
                    className="text-blue-400 border-blue-400 hover:bg-blue-400 hover:text-white"
                    onClick={() => handleViewReport(`${test.scope} - ${test.tester}`)}
                  >
                    <ExternalLink className="h-4 w-4 mr-1" />
                    View
                  </Button>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

// Helper functions
function calculatePentestGrade(critical: number, high: number, medium: number, low: number): string {
  const totalFindings = critical + high + medium + low;
  if (totalFindings === 0) return 'A+';
  
  const weightedScore = (critical * 10) + (high * 5) + (medium * 2) + (low * 1);
  const maxPossibleScore = totalFindings * 10;
  const percentage = ((maxPossibleScore - weightedScore) / maxPossibleScore) * 100;
  
  if (percentage >= 95) return 'A+';
  if (percentage >= 90) return 'A';
  if (percentage >= 87) return 'A-';
  if (percentage >= 83) return 'B+';
  if (percentage >= 80) return 'B';
  if (percentage >= 77) return 'B-';
  if (percentage >= 73) return 'C+';
  if (percentage >= 70) return 'C';
  if (percentage >= 67) return 'C-';
  if (percentage >= 63) return 'D+';
  if (percentage >= 60) return 'D';
  if (percentage >= 57) return 'D-';
  return 'F';
}

function categorizeFindings(title: string, description: string): string {
  const text = (title + ' ' + description).toLowerCase();
  
  if (text.includes('authentication') || text.includes('login') || text.includes('password')) {
    return 'Authentication';
  }
  if (text.includes('authorization') || text.includes('privilege') || text.includes('access control')) {
    return 'Authorization';
  }
  if (text.includes('input') || text.includes('validation') || text.includes('injection') || text.includes('xss')) {
    return 'Input Validation';
  }
  if (text.includes('crypto') || text.includes('encryption') || text.includes('ssl') || text.includes('tls')) {
    return 'Cryptography';
  }
  if (text.includes('session') || text.includes('cookie') || text.includes('token')) {
    return 'Session Management';
  }
  
  return 'Other';
}

export default PentestResults;